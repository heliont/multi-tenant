"""
Django settings for sitecore project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os, sys
from pathlib import Path

# para funcionar arquivo .env secret key e database
from decouple import config, Csv
from dj_database_url import parse as dburl

# Correção substituindo o mysqlclient, use isso apenas em hospedagem linux com cpanel caso não funcionar o mysqlclient
# import pymysql
# pymysql.install_as_MySQLdb()
# Ignorar o codigo comentado acima caso não utilize mysql


# Referencia de localização dos apps dentro da pasta do projeto, pode ser qualquer nome a pasta de apps
PROJECT_ROOT = os.path.dirname(__file__)
sys.path.insert(0, os.path.join(PROJECT_ROOT, 'apps'))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY') # vai ser carregado do .env
# Esse trecho e importante para proteger sua aplicação de terceiros, por exemplo senhas de usuários..


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool) # vai ser carregado do .env


# Endereço da aplicação seja dominio ou ip, localmemte ou em produção
#ALLOWED_HOSTS = config('ALLOWED_HOSTS', default=[], cast=Csv()) # vai ser carregado do .env
# Necessario para aplicação rodando com certificado SSL (https) sem isso o login fica bugado.
#CSRF_TRUSTED_ORIGINS = config('CSRF_TRUSTED_ORIGINS', default=[], cast=Csv()) # vai ser carregado do .env
ALLOWED_HOSTS = ['app.booksite.com.br', '.booksite.com.br']

#'127.0.0.1', '.localhost', 



# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASE_URL = config('DATABASE_URL')

# Verifica se a variael DATABASE_URL está vazia
if DATABASE_URL == '':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    # Caso a variavel DATABASE_URL tenha dados será aplicado um banco diferente do sqlite3
    DATABASES = {
        'default': config('DATABASE_URL', cast=dburl),
    }

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # My apps
    'tenant', # Gerenciado do subdominio
    'usuario',


    # Apps / Recursos terceiros
    'django.contrib.sites',  # Necessário para domínios/subdomínios

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'sitecore.middleware.subdominio_middleware.SubdominioMiddleware',  # Subdominio middleware
    'sitecore.middleware.login_required.LoginRequiredMiddleware', # Login Middleware
]

ROOT_URLCONF = 'sitecore.urls'
SITE_ID = 1  # Configurar o domínio principal


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(PROJECT_ROOT, 'templates')], # Necessario para templates organizados em uma unica pasta no projeto
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sitecore.wsgi.application'



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'pt-br'

# Fuso horário
TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
MEDIA_URL = '/media/'


if DEBUG:
    STATICFILES_DIRS = [os.path.join(PROJECT_ROOT, 'static')]

else:
    STATIC_ROOT = os.path.join(PROJECT_ROOT, 'static')

MEDIA_ROOT = os.path.join(PROJECT_ROOT, 'media')

# Para usar exclusivamente na hospedagem de sites
STATIC_STATUS = config('STATIC_STATUS', default=False, cast=bool)

if STATIC_STATUS:
    STATIC_ROOT= config('STATIC_ROOT')
    MEDIA_ROOT= config('MEDIA_ROOT')


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

#SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
#SECURE_SSL_REDIRECT = config('SECURE_SSL_REDIRECT') # vai ser carregado do .env


# Usuário Personalizado
AUTH_USER_MODEL = 'usuario.CustomUser'

LOGIN_URL = '/login/'  # Substitua pela URL real de login

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
